Metadata-Version: 2.4
Name: media-analyzer
Version: 0.1.0
Summary: AI-powered media analysis tool for images and audio using multiple LLM providers
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.12
Description-Content-Type: text/markdown
Requires-Dist: click>=8.1.0
Requires-Dist: pillow>=10.0.0
Requires-Dist: litellm>=1.72.2
Requires-Dist: aiofiles>=24.0.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: pyyaml>=6.0.0
Requires-Dist: tenacity>=8.0.0
Requires-Dist: tqdm>=4.66.0
Requires-Dist: loguru>=0.7.2
Requires-Dist: pandas>=2.0.0
Requires-Dist: rich>=13.0.0
Requires-Dist: nest-asyncio>=1.6.0
Requires-Dist: ffmpeg-python>=0.2.0
Requires-Dist: pydub>=0.25.0
Requires-Dist: pytest-cov>=6.2.1
Requires-Dist: pytest>=8.4.1
Requires-Dist: pytest-asyncio>=1.0.0

# Media Analyzer CLI

AI-powered media analysis tool using multiple LLM providers through LiteLLM. Analyze images and audio files with customizable prompts and output formats.

## Features

- **Multi-model Support**: Use Gemini, OpenAI, Claude, and more through LiteLLM
- **Image & Audio Analysis**: Single files or batch process entire directories
- **Concurrent Processing**: Configurable concurrency with progress tracking
- **Multiple Output Formats**: JSON, Markdown, and Text export
- **Custom Prompts**: Flexible analysis with custom or predefined prompts

## Installation

**Global Installation (Recommended)**

```bash
# Install media-analyzer globally
uv tool install media-analyzer
```

**Development Installation**

```bash
git clone <repository-url>
cd media-analyzer
uv sync
```

## Usage

### Setup

```bash
# Set your API key (choose one)
export OPENAI_API_KEY="sk-your-key-here"
export GEMINI_API_KEY="your-google-key-here"
export ANTHROPIC_API_KEY="sk-ant-your-key-here"
```

### Basic Commands

```bash
# Analyze single image
media-analyzer --type image --model gemini/gemini-2.5-flash --path photo.jpg

# Batch process directory
media-analyzer --type image --model gpt-4o-mini --path ./photos/ --output markdown

# Transcribe audio
media-analyzer --type audio --model whisper-1 --path audio.mp3 --audio-mode transcript

# Analyze audio content
media-analyzer --type audio --model gpt-4o-mini --path podcast.wav --audio-mode description

# Development installation (prefix with uv run)
uv run media-analyzer --type image --model gemini/gemini-2.5-flash --path photo.jpg
```

## Configuration


## Examples

### Image Analysis

```bash
# Custom prompt with word count
media-analyzer --type image --model claude-3-sonnet-20240229 --path chart.jpg \
  --prompt "Analyze this chart focusing on data insights" --word-count 300

# Recursive batch processing
media-analyzer --type image --model gpt-4o-mini --path ./dataset/ \
  --recursive --concurrency 5 --output json --output-file results.json
```

### Audio Processing

```bash
# Batch transcription
media-analyzer --type audio --model whisper-1 --path ./audio/ \
  --audio-mode transcript --output text --output-file transcripts.txt

# Content analysis with custom prompts
media-analyzer --type audio --model gpt-4o-mini --path podcast.wav \
  --audio-mode description --prompt "Summarize key insights" --word-count 200
```

## Models

Supports any model available through [LiteLLM](https://docs.litellm.ai/docs/providers).

## Command Line Options

```
Options:
  -t, --type [image|audio]        Analysis type: image or audio (required)
  -m, --model TEXT                LiteLLM model (required)
  -p, --path PATH                 Media file or directory path (required)
  --audio-mode [transcript|description] Audio analysis mode (required for audio type)
  -w, --word-count INTEGER        Target description word count [default: 100]
  --prompt TEXT                   Custom analysis prompt
  -o, --output [json|markdown|text] Output format [default: json]
  --output-file TEXT              Save results to file
  -r, --recursive                 Process directories recursively
  -c, --concurrency INTEGER       Concurrent requests [default: 3]
  --log-level [DEBUG|INFO|WARNING|ERROR] Logging level [default: INFO]
  -v, --verbose                   Show detailed output including model info
  --version                       Show version and exit
  --help                          Show help and exit
```

## Development

### Running Tests

**Important**: All tests require valid API keys and fail immediately if missing.


# Run tests
uv run pytest
uv run pytest --cov  # with coverage
```

### Development Philosophy

- **Fail Fast**: Raise exceptions immediately rather than graceful degradation
- **Explicit Testing**: Never skip tests due to missing API keys - fail instead
- **Clear Errors**: All error conditions must raise descriptive exceptions

## Examples

See the `examples/` directory for:

- **`sample_usage.py`**: Comprehensive programmatic usage examples
- Different analysis scenarios and configuration options
- Batch processing examples with progress tracking

Run the examples:

```bash
uv run python examples/sample_usage.py
```

### Debug Mode

Enable detailed logging for troubleshooting:

```bash
media-analyzer --type image --model gemini/gemini-2.5-flash --path image.jpg --log-level DEBUG
```
